# Additional DrupalVM vagrant configuration.
# If you need to add your own config, you can put it in an untracked file
# in config/Vagrantfile.custom

# Configure the forwarded port for the acceptance tests.
config.vm.network "forwarded_port", guest: 3306, host: 3334, protocol: "tcp"

# Vagrant Triggers plugin magic

# Restart apache
if Vagrant.has_plugin?('vagrant-triggers')
    if ENV['DR_APACHE_RESTART']
        config.trigger.instead_of :up do
          run_remote "service apache2 start"
        end
    end

    # Dump databases
    config.trigger.before :halt do
      info "Dumping the database before shutting down..."
      run_remote  "if [ -f /vagrant/scripts/vm-only/db-backup-vm.sh ]; then /vagrant/scripts/vm-only/db-backup-vm.sh; fi;"
    end
    config.trigger.before :destroy do
      info "Dumping the database before shutting down..."
      run_remote  "if [ -f /vagrant/scripts/vm-only/db-backup-vm.sh ]; then /vagrant/scripts/vm-only/db-backup-vm.sh; fi;"
    end
    if ENV['DR_DUMP_DBS']
        config.trigger.instead_of :up do
          info "Dumping the databases..."
          run_remote  "if [ -f /vagrant/scripts/vm-only/db-backup-vm.sh ]; then /vagrant/scripts/vm-only/db-backup-vm.sh; fi;"
        end
    end
end

if ENV['DR_NEW_VHOSTS']
      config.vm.provision 'ansible' do |ansible|
        ansible.playbook = "config/dr_playbook.yml"
        ansible.extra_vars = {
          config_dir: host_config_dir,
          drupalvm_env: drupalvm_env
        }
        ansible.raw_arguments = ENV['DRUPALVM_ANSIBLE_ARGS']
      end
end

# Allow an untracked Vagrantfile to modify the configurations
eval File.read "#{host_config_dir}/Vagrantfile.custom" if File.exist?("#{host_config_dir}/Vagrantfile.custom")
